<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(vk_f3)) { 
    event_user(0);
}

if (keyboard_check_pressed(vk_f4)) { 
    event_user(1);
}

flash_timer--;
if (flash_timer &lt;= 0) {
    flash = !flash;
    flash_timer = 5;
}

heat_pulse += 0.01
if (heat_pulse &gt; 1)
    heat_pulse = 0;

room_speed = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>window_set_fullscreen(!window_get_fullscreen());
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scale++;
if (scale &gt; full_scale)
    scale = 1;
    
window_set_size(scale * 64, scale * 64);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_free(view_surface);
view_surface = surface_create(view_wview[0], view_hview[0]);
view_surface_id[0] = view_surface;

surface_free(heat_surface);
heat_surface = surface_create(64, 64);
    
surface_free(game_surface);
game_surface = surface_create(64, 64);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scale = 8;
dest_scale = 8;
full_scale = 1;

var d_w = display_get_width();
var d_h = display_get_height()

while (64 * (full_scale + 1) &lt; d_w &amp;&amp; 64 * (full_scale + 1) &lt; d_h)
    full_scale++;
    
display_x = d_w / 2 - full_scale * 32;
display_y = d_h / 2 - full_scale * 32;

//window_set_size(64 * scale, 64 * scale);

application_surface_enable(false);
application_surface_draw_enable(false);

view_surface = -1;
game_surface = -1;
heat_surface = -1;

shake = 0;
invert = 0;
flash = false;
flash_timer = 0;
heat_pulse = 0;

room_goto_next();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(view_surface) &amp;&amp; surface_exists(game_surface)) {
    surface_set_target(game_surface);
    
        if (instance_exists(obj_game_control)) {
            draw_clear(make_color_rgb(32, 32, 32));
            
            draw_set_color(make_color_rgb(16, 16, 16));
            draw_rectangle(0, 0, 3, 63, true);
            draw_rectangle(60, 0, 63, 63, true);
            draw_rectangle(0, 0, 63, 3, true);
            draw_rectangle(0, 60, 63, 63, true);
            
            if (instance_exists(obj_heat)) {
                shader_set(shad_heat);
                shader_set_uniform_f(shader_get_uniform(shad_heat, "pulse"),  1.5 + 0.5 * sin(heat_pulse * 2 * pi));
            }
            
            draw_surface(view_surface, 4, 4);
            
            if (instance_exists(obj_heat))
                shader_reset();
            
            var max_hp = obj_game_control.max_hp;
            var hp = obj_game_control.hp;
            var max_ammo = obj_game_control.max_ammo;
            var ammo = obj_game_control.ammo;
            
            draw_set_color(c_gray);
            draw_rectangle(1, 59 - floor(55 * (max_hp / 8)), 2, 59, false);
            draw_rectangle(61, 59 - floor(55 * (max_ammo / 8)), 62, 59, false);
            
            if (hp &gt; 0) {
                draw_set_color(c_blue);
                draw_rectangle(1, 59 - floor(55 * (hp / max_hp) * (max_hp / 8)), 2, 59, false);
            }
            if (ammo &gt; 0) {
                draw_set_color(make_color_rgb(255, 128, 0));
                draw_rectangle(61, 59 - floor(55 * (ammo / max_ammo) * (max_ammo / 8)), 62, 59, false);
            }
            
            for (var i = 0; i &lt; 6; i++) {
                if (ds_list_find_index(obj_game_control.unlocked_levels, i) &gt; -1)
                    draw_sprite(spr_key, i, 4 + (56 / 6) * (i + 0.5), 2);
            }
            
            for (var i = 0; i &lt; 8; i++) {
                if (ds_list_find_index(obj_game_control.item_list, i) &gt; -1)
                    draw_sprite(spr_item, i, 4 + (56 / 8) * (i + 0.5), 62);
            }
            
            switch (obj_game_control.state){
                case (obj_game_control.base_state):
                    draw_set_color(c_white);
                        
                    draw_set_halign(fa_center);
                    draw_set_valign(fa_middle);
                        
                    draw_set_font(fnt_main);
                    
                    if (obj_game_control.on_lift)
                        draw_text_ext(32, 16, "Press shift to use lift", 4, 52);
                        
                    var show_air = obj_game_control.air div 2;
                        
                    if (obj_game_control.air mod 4 &gt; 0)
                        draw_text_ext(32, 16, "Air: " + string(show_air), 4, 52);
                    
                    break;
                case (obj_game_control.item_state):
                    draw_set_color(make_color_rgb(32, 32, 32));
                    
                    draw_rectangle(32 - 23, 16 - 7, 32 + 23 - 1, 16 + 7 - 1, false);
                    draw_rectangle(32 - 26, 48 - 10, 32 + 26 - 1, 48 + 10 - 1, false);
                    
                    draw_set_color(make_color_rgb(16, 16, 16));
                    
                    draw_rectangle(32 - 24, 16 - 8, 32 + 24 - 1, 16 + 8 - 1, true);
                    draw_rectangle(32 - 27, 48 - 11, 32 + 27 - 1, 48 + 11 - 1, true);
                    
                    draw_set_color(c_white);
                    
                    draw_set_halign(fa_center);
                    draw_set_valign(fa_middle);
                    
                    draw_set_font(fnt_title);
                    
                    draw_text(32, 15, obj_game_control.title);
                    
                    draw_set_font(fnt_main);
                    
                    draw_text_ext(32, 48, obj_game_control.description, 4, 52);
                    
                    break;
                case (obj_game_control.lift_state):
                    draw_set_color(make_color_rgb(32, 32, 32));
                    
                    draw_rectangle(32 - 20, 32 - 16, 32 + 20 - 1, 32 + 16 - 1, false);
                    
                    draw_set_color(make_color_rgb(16, 16, 16));
                    
                    draw_rectangle(32 - 20, 32 - 16, 32 + 20 - 1, 32 + 16 - 1, true);
                
                    draw_set_color(c_white);
                    
                    draw_set_halign(fa_center);
                    draw_set_valign(fa_middle);
                    
                    draw_set_font(fnt_main);
                    
                    scr_draw_levels(obj_game_control.unlocked_levels, obj_game_control.level, obj_game_control.lift_selected, 32, 21);
                        
                    break;
                case (obj_game_control.map_state):
                    draw_set_color(c_black);
                    draw_rectangle(4, 4, 59, 59, false);
                    
                    draw_set_halign(fa_center);
                    draw_set_valign(fa_middle);
                    
                    draw_set_font(fnt_main);
                    
                    draw_set_color(c_white);
                    
                    var legend;
                    legend[0] = "You";
                    legend[1] = "Save";
                    legend[2] = "Lift";
                    legend[3] = "Item";
                    
                    var blend;
                    blend[0] = c_white;
                    blend[1] = make_color_rgb(0, 255, 255);
                    blend[2] = make_color_rgb(255, 255, 0);
                    blend[3] = make_color_rgb(255, 0, 255);
                    
                    for (var i = 0; i &lt; 4; i++) {
                        var alpha = 1;
                        if (i == 0 &amp;&amp; !flash)
                            alpha = 0;
                        draw_sprite_ext(spr_map_square, 0, 35, 8 + 5 * i, 1, 1, 0, blend[i], alpha);
                        draw_text(48, 10 + 5 * i, legend[i]);
                    }
                    
                    scr_draw_levels(obj_game_control.unlocked_levels, obj_game_control.level, obj_game_control.lift_selected, 32, 36);
                
                    var draw_flash = flash;
                    if (obj_game_control.lift_selected != obj_game_control.level)
                        draw_flash = false;
                    scr_draw_map(ds_list_find_value(obj_game_control.map_list, obj_game_control.lift_selected), draw_flash, obj_game_control.room_x, obj_game_control.room_y, 5, 5);
                                
                    break;
            }
        }
        else
            draw_surface(view_surface, 0, 0);
    
    surface_reset_target();
    
    if (invert &gt; 0)
        shader_set(shad_invert);
    
    if (window_get_fullscreen())
        draw_surface_stretched(game_surface, display_x, display_y + shake * full_scale, 64 * full_scale, 64 * full_scale);
    else
        draw_surface_stretched(game_surface, 0, shake * scale, 64 * scale, 64 * scale);

    if (invert &gt; 0) {
        shader_reset();
        invert--;
    }
    if (shake != 0)
        shake = -(abs(shake) - 1);

}
else {
    view_surface = surface_create(view_wview[0], view_hview[0]);
    view_surface_id[0] = view_surface;
    
    heat_surface = surface_create(64, 64);
    
    game_surface = surface_create(64, 64);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
