<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_floor_base</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>base_state = 0;
item_state = 1;
lift_state = 2;

state = base_state;

title = "";
description = "";

item_power_shot = false;
item_dash = false;
item_phase_dash = false;
item_magnet = false;
item_magnet_inverter = false;
item_heat_shield = false;
item_air_tank = false;

max_hp = 8;
hp = max_hp;

max_ammo = 8;
ammo = max_ammo;
ammo_delay = 0;

lift_selected = 1;
level = 1;

unlocked_levels = ds_list_create();
ds_list_add(unlocked_levels, 1);

level_list = ds_list_create();
ds_list_add(level_list, 
    scr_generate_level0(),
    scr_generate_level1(),
    scr_generate_level2(),
    scr_generate_level3(),
    scr_generate_level4()
);

map_list = ds_list_create();
for (var i = 0; i &lt; 5; i++) {
    var map = ds_grid_create(9, 9);
    for (var col = 0; col &lt; 9; col++) {
        for (var row = 0; row &lt; 9; row++)
            ds_grid_add(map, col, row, "00000");
    }
    ds_list_add(map_list, map);
}

room_x = 4;
room_y = 8;

room_goto(ds_grid_get(ds_list_find_value(level_list, level), room_x, room_y));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (state) {
    case base_state:
        if (ammo_delay &gt; 0)
            ammo_delay--;
        else {
            ammo += 0.5;
            if (ammo &gt; max_ammo)
                ammo = max_ammo;
        }
        
        if (instance_exists(obj_player)) {
            var change_room = false;
        
            if (obj_player.x &lt; 0) {
                obj_player.x += room_width;
                room_x--;
                change_room = true;
            }
            else if (obj_player.x &gt; room_width) {
                obj_player.x -= room_width;
                room_x++;
                change_room = true;
            }
            else if (obj_player.y &lt; 0) {
                obj_player.y += room_height;
                room_y--;
                change_room = true;
            }
            else if (obj_player.y &gt; room_height) {
                obj_player.y -= room_height;
                room_y++;
                change_room = true;
            }
            
            if (change_room)
                room_goto(ds_grid_get(ds_list_find_value(level_list, level), room_x, room_y));
        }
        
        if (keyboard_check_pressed(vk_escape)) {
            if (instance_exists(obj_player))
                obj_player.persistent = false;
            persistent = false;
            room_goto(rm_title);
        }
        
        break;
    case item_state:
        if (keyboard_check_pressed(vk_anykey) &amp;&amp; !audio_is_playing(mus_fanfare))
            state = base_state;
        
        break;
    case lift_state:
        if (keyboard_check_pressed(vk_up)) {
            audio_play_sound(snd_select, 0, false);
            lift_selected--;
        }
        if (keyboard_check_pressed(vk_down)) {
            audio_play_sound(snd_select, 0, false);
            lift_selected++;
        }
            
        if (lift_selected &lt; 0)
            lift_selected = 4;
        if (lift_selected &gt; 4)
            lift_selected = 0;
            
        if (keyboard_check_pressed(ord('A'))) {
            if (ds_list_find_index(unlocked_levels, lift_selected) == -1)
                audio_play_sound(snd_error, 0, false);
            else {
                audio_play_sound(snd_confirm, 0, false);
                state = base_state;
                if (lift_selected != level) {
                    level = lift_selected;
                    obj_player.x = room_width / 2;
                    obj_player.y = room_height / 2;
                    room_goto(ds_grid_get(ds_list_find_value(level_list, level), room_x, room_y));
                }
            }
        }
            
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ammo -= 0.5;
ammo_delay = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var room_string = "1";

room_string += scr_check_empty_x(room_width - 4);
room_string += scr_check_empty_y(0);
room_string += scr_check_empty_x(0);
room_string += scr_check_empty_y(room_height - 4);
room_string += "000";

ds_grid_set(ds_list_find_value(map_list, level), room_x, room_y, room_string);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
